function xfem = flowcell_init(varargin)

% FEMLAB Model M-file
% Generated by FEMLAB 3.1 (FEMLAB 3.1.0.157, $Date: 2007-09-19 04:45:38 $)

flclear fem

% Femlab version
clear vrsn
vrsn.name = 'FEMLAB 3.1';
vrsn.ext = '';
vrsn.major = 0;
vrsn.build = 157;
vrsn.rcs = '$Name:  $';
vrsn.date = '$Date: 2007-09-19 04:45:38 $';
fem.version = vrsn;

% Constants
fem.const={'rho_sam','1e3','rho_buf','1e3','eta_sam','1e-3', ...
           'eta_buf','1e-3','D_sam','2.045e-9','concen_buf', ...
           '1.0','v_sam', '3e-3', 'v_buf','3e-2','concen_sam','0', ...
           'D_buf','2.045e-9'};

% Geometry
width_inlet = 5e-5/2; % divide by two due to symmetry
width_side = 5e-5;
width_outlet = 5e-5;

carr={curve2([-3.0E-4,-3.0E-4],[2.5E-5,0],[1,1]), ...
  curve2([-3.0E-4,-7.5E-5],[0,0],[1,1]), ...
  curve2([-7.5E-5,-7.5E-5],[0,2.5E-5],[1,1]), ...
  curve2([-7.5E-5,-3.0E-4],[2.5E-5,2.5E-5],[1,1])};
g1=geomcoerce('solid',carr);
carr={curve2([-7.5E-5,-7.5E-5],[2.5E-5,0],[1,1]), ...
  curve2([-7.5E-5,1.5E-4],[0,0],[1,1]), ...
  curve2([1.5E-4,1.5E-4],[0,2.5E-5],[1,1]), ...
  curve2([1.5E-4,2.5E-5],[2.5E-5,2.5E-5],[1,1]), ...
  curve2([2.5E-5,2.5E-5],[2.5E-5,7.5E-5],[1,1]), ...
  curve2([2.5E-5,-2.5E-5],[7.5E-5,7.5E-5],[1,1]), ...
  curve2([-2.5E-5,-2.5E-5],[7.5E-5,2.5E-5],[1,1]), ...
  curve2([-2.5E-5,-7.5E-5],[2.5E-5,2.5E-5],[1,1])};
g2=geomcoerce('solid',carr);
carr={curve2([-2.5E-5,-2.5E-5],[2.5E-4,7.5E-5],[1,1]), ...
  curve2([-2.5E-5,2.5E-5],[7.5E-5,7.5E-5],[1,1]), ...
  curve2([2.5E-5,2.5E-5],[7.5E-5,2.5E-4],[1,1]), ...
  curve2([2.5E-5,-2.5E-5],[2.5E-4,2.5E-4],[1,1])};
g3=geomcoerce('solid',carr);
carr={curve2([1.5E-4,1.5E-4],[2.5E-5,0],[1,1]), ...
  curve2([1.5E-4,5.0E-4],[0,0],[1,1]), ...
  curve2([5.0E-4,5.0E-4],[0,2.5E-5],[1,1]), ...
  curve2([5.0E-4,1.5E-4],[2.5E-5,2.5E-5],[1,1])};
g4=geomcoerce('solid',carr);
carr={curve2([5.0E-4,5.0E-4],[2.5E-5,0],[1,1]), ...
  curve2([5.0E-4,0.0010],[0,0],[1,1]), ...
  curve2([0.0010,0.0010],[0,2.5E-5],[1,1]), ...
  curve2([0.0010,5.0E-4],[2.5E-5,2.5E-5],[1,1])};
g5=geomcoerce('solid',carr);

% Geometry
clear s
s.objs={g1,g2,g3,g4,g5};
s.name={'CO1','CO2','CO3','CO4','CO5'};
s.tags={'g1','g2','g3','g4','g5'};

fem.draw=struct('s',s);
fem.geom=geomcsg(fem);

% Initialize mesh
fem.mesh=meshinit(fem, 'hmax',[1e-5], 'hmaxedg',[2,4e-6,5,4e-6,6, ...
                    4e-6,7,4e-6,11,4e-6,12,4e-6,15,4e-6,18,4e-6], ...
                  'hmaxsub',[2,5e-6,4,7e-6,5,8e-6]);


% Extend mesh
fem.xmesh=meshextend(fem);

% Geometry 2  **************************************

g6=extrude(g4,'distance',[5e-5],'scale',[1;1],'displ',[0;0], ...
           'twist',[0],'face','none','wrkpln',[0 1 0;0 0 1;0 0 0]);
g7=extrude(g3,'distance',[5e-5],'scale',[1;1],'displ',[0;0], ...
           'twist',[0],'face','none','wrkpln',[0 1 0;0 0 1;0 0 0]);
g8=extrude(g1,'distance',[5e-5],'scale',[1;1],'displ',[0;0], ...
           'twist',[0],'face','none','wrkpln',[0 1 0;0 0 1;0 0 0]);
g9=extrude(g5,'distance',[5e-5],'scale',[1;1],'displ',[0;0], ...
           'twist',[0],'face','none','wrkpln',[0 1 0;0 0 1;0 0 0]);
g10=extrude(g2,'distance',[5e-5],'scale',[1;1],'displ',[0;0], ...
            'twist',[0],'face','none','wrkpln',[0 1 0;0 0 1;0 0 0]);

% Using multiple geometries
flclear xfem
% Keep global fields
fields={'version','const','functions','xmesh','sol'};
for ii=1:length(fields)
  if isfield(fem,fields{ii})
    xfem.(fields{ii})=fem.(fields{ii});
    fem=rmfield(fem,fields{ii});
  end
end
xfem.fem{1}=fem;

% Geometry 2
flclear fem
clear s
s.objs={g6,g7,g8,g9,g10};
s.name={'EXT1','EXT2','EXT3','EXT4','EXT5'};
s.tags={'g6','g7','g8','g9','g10'};

fem.draw=struct('s',s);
fem.geom=geomcsg(fem);

% Initialize mesh for geometry 2
fem.mesh=meshinit(fem, ...
                  'hmax',[], ...
                  'hmaxfact',1, ...
                  'hcutoff',0.01, ...
                  'hgrad',1.4, ...
                  'hcurve',0.4, ...
                  'hnarrow',1, ...
                  'hpnt',20, ...
                  'xscale',1.0, ...
                  'yscale',1.0, ...
                  'zscale',1.0, ...
                  'jiggle','on', ...
                  'mlevel','sub');

% Refine mesh for geometry 2
fem.mesh=meshrefine(fem, ...
                    'mcase',0, ...
                    'rmethod','longest');
xfem.fem{2}=fem;

%********************
%
% Physics settings
%
%********************


fem=xfem.fem{1};

% Application mode 1
clear appl
appl.mode.class = 'FlNavierStokes';
appl.mode.type = 'cartesian';
appl.dim = {'u','v','p'};
appl.sdim = {'x','y','z'};
appl.name = 'ns';
appl.shape = {'shlag(2,''u'')','shlag(2,''v'')','shlag(1,''p'')'};
appl.gporder = {4,2};
appl.cporder = {2,1};
appl.sshape = 2;
appl.border = 'off';
appl.assignsuffix = '_ns';
clear prop
prop.elemdefault='Lagp2p1';
prop.stensor='full';
prop.weakconstr=struct('value',{'off'},'dim',{{'lm1','lm2'}});
appl.prop = prop;
clear pnt
pnt.p0 = 0;
pnt.pnton = 0;
pnt.ind = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
appl.pnt = pnt;
clear bnd
bnd.type = {'noslip','neutral','uv','slip','uv','out'};
bnd.u0 = {0,0,'v_sam*6*s*(1-s)',0,0,0};
bnd.v0 = {0,0,0,0,'-v_buf*6*s*(1-s)',0};
bnd.p0 = 0;
bnd.ind = [3,4,1,2,4,1,1,1,2,5,1,1,1,2,4,1,2,4,1,6];
appl.bnd = bnd;
clear equ
equ.shape = [1;2;3];
equ.gporder = {{1;1;2}};
equ.cporder = {{1;1;2}};
equ.init = {{'v_sam';0;0},{'v_sam/2';'-v_buf/2';0},{0;'-v_buf';0},{'v_sam+v_buf*2';0;0}};
equ.usage = 1;
equ.rho = {'rho_sam','rho_sam','rho_buf','rho_sam'};
equ.eta = {'eta_sam','eta_sam','eta_buf','eta_sam'};
equ.F_x = 0;
equ.F_y = 0;
equ.idon = 0;
equ.delid = 0.5;
equ.sdon = 0;
equ.sdtype = 'pgc';
equ.delsd = 0.25;
equ.cdon = 0;
equ.cdtype = 'sc';
equ.delcd = 0.35;
equ.pson = 0;
equ.delps = 1;
equ.ind = [1,2,3,4,4];
appl.equ = equ;
fem.appl{1} = appl;

% Application mode 2
clear appl
appl.mode.class = 'FlConvDiff';
appl.mode.type = 'cartesian';
appl.dim = {'c'};
appl.sdim = {'x','y','z'};
appl.name = 'cd';
appl.shape = {'shlag(2,''c'')'};
appl.gporder = 4;
appl.cporder = 2;
appl.sshape = 2;
appl.border = 'off';
appl.assignsuffix = '_cd';
clear prop
prop.elemdefault='Lag2';
prop.equform='noncons';
prop.weakconstr=struct('value',{'off'},'dim',{{'lm3'}});
appl.prop = prop;
clear bnd
bnd.N = 0;
bnd.c0 = {0,0,'concen_sam','concen_buf',0};
bnd.type = {'N0','cont','C','C','Nc'};
bnd.ind = [3,1,1,2,1,1,1,1,2,4,1,1,1,2,1,1,2,1,1,5];
appl.bnd = bnd;
clear equ
equ.shape = 1;
equ.gporder = 1;
equ.cporder = 1;
equ.init = {'concen_sam','concen_buf*2/3','concen_buf'};
equ.usage = 1;
equ.D = 'D_buf';
equ.dtensor = 1;
equ.dtype = 'iso';
equ.R = 0;
equ.Dts = 1;
equ.u = 'u';
equ.v = 'v';
equ.idon = 0;
equ.delid = 0.5;
equ.sdon = 0;
equ.sdtype = 'pgc';
equ.delsd = 0.25;
equ.cdon = 0;
equ.cdtype = 'sc';
equ.delcd = 0.35;
equ.ind = [1,2,3,2,2];
appl.equ = equ;
fem.appl{2} = appl;
fem.sdim = {'x','y'};

% Simplify expressions
fem.simplify = 'on';
fem.border = 1;

% Global expressions
fem.expr = {};
xfem.fem{1} = fem;

fem=xfem.fem{2};

% Application mode 1
clear appl
appl.mode.class = 'FlNavierStokes';
appl.mode.type = 'cartesian';
appl.dim = {'u2','v2','w2','p2'};
appl.sdim = {'x','y','z'};
appl.name = 'ns2';
appl.shape = {'shlag(2,''u2'')','shlag(2,''v2'')','shlag(2,''w2'')','shlag(1,''p2'')'};
appl.gporder = {4,2};
appl.cporder = {2,1};
appl.sshape = 2;
appl.border = 'off';
appl.assignsuffix = '_ns2';
clear prop
prop.elemdefault='Lagp2p1';
prop.stensor='full';
prop.weakconstr=struct('value',{'off'},'dim',{{'lm4','lm5','lm6'}});
appl.prop = prop;
clear pnt
pnt.p0 = 0;
pnt.pnton = 0;
pnt.ind = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
appl.pnt = pnt;
clear bnd
bnd.type = {'noslip','neutral','uv','slip','uv','out'};
bnd.u0 = {0,0,'v_sam',0,0,0};
bnd.v0 = {0,0,0,0,'-v_buf',0};
bnd.w0 = 0;
bnd.p0 = 0;
bnd.ind = [3,4,4,1,1,2,4,4,1,1,1,1,2,4,1,5,1,1,1,2,4,4,1,1,2,4,4,1,1,6];
appl.bnd = bnd;
clear equ
equ.shape = [1;2;3;4];
equ.gporder = {{1;1;1;2}};
equ.cporder = {{1;1;1;2}};
equ.init = {{'v_sam';0;0;0},{'v_sam';'-v_buf';0;0},{0;'-v_buf';0;0},{'v_sam+v_buf*2';0;0;0}};
equ.usage = 1;
equ.rho = 'rho_sam';
equ.eta = 'eta_sam';
equ.F_x = 0;
equ.F_y = 0;
equ.F_z = 0;
equ.idon = 0;
equ.delid = 0.5;
equ.sdon = 0;
equ.sdtype = 'pgc';
equ.delsd = 0.25;
equ.cdon = 0;
equ.cdtype = 'sc';
equ.delcd = 0.35;
equ.pson = 0;
equ.delps = 1;
equ.ind = [1,2,3,4,4];
appl.equ = equ;
fem.appl{1} = appl;

% Application mode 2
clear appl
appl.mode.class = 'FlConvDiff';
appl.mode.type = 'cartesian';
appl.dim = {'c2'};
appl.sdim = {'x','y','z'};
appl.name = 'cd2';
appl.shape = {'shlag(2,''c2'')'};
appl.gporder = 4;
appl.cporder = 2;
appl.sshape = 2;
appl.border = 'off';
appl.assignsuffix = '_cd2';
clear prop
prop.elemdefault='Lag2';
prop.equform='noncons';
prop.weakconstr=struct('value',{'off'},'dim',{{'lm7'}});
appl.prop = prop;
clear bnd
bnd.N = 0;
bnd.c0 = {0,0,'concen_sam','concen_buf',0};
bnd.type = {'N0','cont','C','C','Nc'};
bnd.ind = [3,1,1,1,1,2,1,1,1,1,1,1,2,1,1,4,1,1,1,2,1,1,1,1,2,1,1,1,1,5];
appl.bnd = bnd;
clear equ
equ.shape = 1;
equ.gporder = 1;
equ.cporder = 1;
equ.init = {'concen_sam','concen_buf/2','concen_buf','concen_buf*2/3'};
equ.usage = 1;
equ.D = 'D_buf';
equ.dtensor = 1;
equ.dtype = 'iso';
equ.R = 0;
equ.Dts = 1;
equ.u = 'u2';
equ.v = 'v2';
equ.w = 'w2';
equ.idon = 0;
equ.delid = 0.5;
equ.sdon = 0;
equ.sdtype = 'pgc';
equ.delsd = 0.25;
equ.cdon = 0;
equ.cdtype = 'sc';
equ.delcd = 0.35;
equ.ind = [1,2,3,4,4];
appl.equ = equ;
fem.appl{2} = appl;
fem.sdim = {'x','y','z'};

% Simplify expressions
fem.simplify = 'on';
fem.border = 1;

% Global expressions
fem.expr = {};
xfem.fem{2} = fem;

% Functions
clear fcns
xfem.functions = {};

% Multiphysics
xfem=multiphysics(xfem);

% Extend mesh
xfem.xmesh=meshextend(xfem,'geoms',[1,2],'eqvars','on','cplbndeq', ...
                      'on','cplbndsh','off');

%********************
%
% Solve the problem
%
%********************

% Solve problem for geometry 1
%   xfem.sol=femnlin(xfem, ...
%                    'method','eliminate', ...
%                    'nullfun','auto', ...
%                    'blocksize',5000, ...
%                    'complexfun','off', ...
%                    'conjugate','on', ...
%                    'symmetric','off', ...
%                    'solcomp',{'u','v','p'}, ...
%                    'outcomp',{'u2','c2','c','u','w2','v2','p2','p','v'}, ...
%                    'rowscale','on', ...
%                    'ntol',1.0E-6, ...
%                    'maxiter',25, ...
%                    'hnlin','off', ...
%                    'linsolver','umfpack', ...
%                    'thresh',0.1, ...
%                    'umfalloc',0.7, ...
%                    'uscale','auto', ...
%                    'mcase',0);
%   
%   % Save current fem structure for restart purposes
%   fem0=xfem;
%   
%   % Evaluating u using all solution numbers
%   u = asseminit(xfem,'init',fem0.sol,'blocksize',5000);
%   
%   % Solve c
%   xfem.sol=femnlin(xfem, ...
%                    'init',fem0.sol, ...
%                    'u',u, ...
%                    'method','eliminate', ...
%                    'nullfun','auto', ...
%                    'blocksize',5000, ...
%                    'complexfun','off', ...
%                    'conjugate','on', ...
%                    'symmetric','off', ...
%                    'solcomp',{'c'}, ...
%                    'outcomp',{'u2','c2','c','u','w2','p','v2','p2','v'}, ...
%                    'rowscale','on', ...
%                    'ntol',1.0E-6, ...
%                    'maxiter',25, ...
%                    'hnlin','off', ...
%                    'linsolver','umfpack', ...
%                    'thresh',0.1, ...
%                    'umfalloc',0.7, ...
%                    'uscale','auto', ...
%                    'mcase',0);
%   
%   
%   
%   % Solve problem for geometry 2
%   xfem.sol=femnlin(xfem, ...
%                    'method','eliminate', ...
%                    'nullfun','auto', ...
%                    'blocksize',5000, ...
%                    'complexfun','off', ...
%                    'conjugate','on', ...
%                    'symmetric','off', ...
%                    'solcomp',{'u2','v2','w2','p2'}, ...
%                    'outcomp',{'u2','c2','c','u','w2','v2','p2','p','v'}, ...
%                    'rowscale','on', ...
%                    'ntol',1.0E-6, ...
%                    'maxiter',25, ...
%                    'hnlin','off', ...
%                    'linsolver','umfpack', ...
%                    'thresh',0.1, ...
%                    'umfalloc',0.7, ...
%                    'uscale','auto', ...
%                    'mcase',0);
%   
%   % Save current fem structure for restart purposes
%   fem0=xfem;
%   
%   % Evaluating u using all solution numbers
%   u = asseminit(xfem,'init',fem0.sol,'blocksize',5000);
%   
%   % Solve c2
%   xfem.sol=femnlin(xfem, ...
%                    'init',fem0.sol, ...
%                    'u',u, ...
%                    'method','eliminate', ...
%                    'nullfun','auto', ...
%                    'blocksize',5000, ...
%                    'complexfun','off', ...
%                    'conjugate','on', ...
%                    'symmetric','off', ...
%                    'solcomp',{'c2'}, ...
%                    'outcomp',{'u2','c2','c','u','w2','v2','p2','p','v'}, ...
%                    'rowscale','on', ...
%                    'ntol',1.0E-6, ...
%                    'maxiter',25, ...
%                    'hnlin','off', ...
%                    'linsolver','umfpack', ...
%                    'thresh',0.1, ...
%                    'umfalloc',0.7, ...
%                    'uscale','auto', ...
%                    'mcase',0);
%   
%   
%   % Save current fem structure for restart purposes
%   fem0=xfem;
