function [xfem, mesh_factor] = runfl_meshrefine(func_xfem, mesh_factor, ...
                                                varargin)

% 1) Check input parameters

if ~exist('mesh_factor', 'var')
   mesh_factor = 1.0;
end

% 2) defaut settings
mesh_step = 0.04;
solver=1; % 0: direct, 1: iterative
parse_varargin(varargin);

% Mapping current solution to extended mesh
%init = asseminit(fem,'init',fem0.sol,'xmesh',fem0.xmesh);

% Mapping current solution to current extended mesh
%u = asseminit(fem,'init',fem0.sol,'xmesh',fem0.xmesh);

try
   while (0 == 0)
      disp(['RUNFL_MESHREFINE:: trying mesh factor =' num2str(mesh_factor)])
      flclear xfem      
      [xfem, geoconst] = feval(func_xfem, 'mesh_factor', mesh_factor, ...
                               varargin{:});
      disp(xfem.xmesh)
      switch length(xfem.equ.dim)
         case 4 % 2D: u, v, p, c
            xfem.sol=femnlin(xfem, 'method','eliminate', 'nullfun','auto', ...
                             'blocksize',5000, 'complexfun','off', ...
                             'conjugate','on', 'symmetric','off', ...
                             'solcomp',{'u','v','p'}, 'outcomp', ...
                             {'c','u','p','v'}, 'rowscale','on', ...
                             'ntol',1.0E-6, 'maxiter',25, 'hnlin','off', ...
                             'linsolver','umfpack', 'thresh',0.1, ...
                             'umfalloc',0.7, 'uscale','auto', 'mcase',0);
            
         case 5 % 3D: u, v, w, p, c
            switch solver
               case 0 % direct
                  xfem.sol=femnlin(xfem, ...
                                   'method','eliminate', ...
                                   'nullfun','auto', ...
                                   'blocksize',5000, ...
                                   'complexfun','off', ...
                                   'conjugate','on', ...
                                   'symmetric','off', ...
                                   'solcomp',{'w','u','p','v'}, ...
                                   'outcomp',{'w','c','u','p','v'}, ...
                                   'rowscale','on', ...
                                   'ntol',1.0E-6, ...
                                   'maxiter', 25, ...
                                   'hnlin','off', ...
                                   'linsolver','umfpack', ...
                                   'thresh',0.1, ...
                                   'umfalloc',0.7, ...
                                   'uscale','auto', ...
                                   'mcase',0);
                  
               case 1 % iterative
                  xfem.sol=femnlin(xfem, 'method','eliminate', ...
                                   'nullfun','auto', ...
                                   'blocksize',5000, ...
                                   'complexfun','off', ...
                                   'conjugate','on', ...
                                   'symmetric','off', ...
                                   'solcomp',{'w','u','p','v'}, ...
                                   'outcomp',{'w','c','u','p','v'}, ...
                                   'rowscale','on', ...
                                   'ntol',1.0E-6, ...
                                   'maxiter',3, ...
                                   'hnlin','off', ...
                                   'linsolver','gmres', ...
                                   'rhob',600.0, ...
                                   'maxlinit',10000, ...
                                   'itrestart',80, ...
                                   'prefun','ilu', ...
                                   'prepar',{'droptol',0.01,'thresh',1.0,'respectpattern','on'}, ...
                                   'uscale','auto', ...
                                   'mcase',0);
               otherwise
                  disp('RUNFL_MESHREFINE:: no solver is selected!!!')
            end
            
         otherwise
            disp('RUNFL_MESHREFINE:: can not start the solver!!!')
      end
      mesh_factor = mesh_factor - mesh_step;
   end
catch
   disp('RUNFL_MESHREFINE:: out of memory at this mesh factor! ')
   mesh_factor = mesh_factor + mesh_step;
end

% Building the "maximum" meshed FEMLAB model
[xfem, geoconst] = feval(func_xfem, 'mesh_factor', mesh_factor, varargin{:} );
