function textable = arr2textable(arr, varargin)
% --- Usage:
%        arr2textable(arr, varargin)
% --- Purpose:
%        output a LaTex table commands to display an array. 
% --- Parameter(s):
%        arr  - the array to convert
%        labels_row - the row labels
%        labels_col - the column labels
%        caption - the caption
%        data_format - the data format string, e.g. '%5i'
% --- Return(s):
%        textable - a cell array of strings of the LaTex commands
%
% --- Example(s):
%
% $Id: arr2textable.m,v 1.1 2013/08/18 04:17:11 xqiu Exp $
%

% 1) Simple check on input parameters

if (nargin < 1)
   help arr2textable
   return
end

% 2) create default labels if not passed

[num_rows, num_cols] = size(arr);
labels_row = num2lege(1:num_rows,'row no.');
labels_col = num2lege(1:num_cols, 'col no.');
data_format = {'%6.4g'};
align = {[repmat('|c',1,num_cols+1) '|']};
hline = 0;
caption = {'Tablue automatically generated by arr2textable.m'};
parse_varargin(varargin);

% 3) generate the textable

textable{1} = ['% Automatically generated by arr2textable.m at ', ]; 
textable = {textable{:}, '\begin{table*}[tbp]', '   \centering'};
textable = {textable{:}, ['   \begin{tabular}[t]{' align{:} '}']};
textable = {textable{:}, '   \hline'};
str_row = '   \textbf{*} ';

% the column labels
for i=1:num_cols
   str_row = [str_row ' & \textbf{' labels_col{i} '} '];
end
textable = {textable{:}, [str_row ' \\'], '   \hline'};

% each row
for irow=1:num_rows
   str_row = ['   \textbf{' labels_row{irow} '} '];
   for icol=1:num_cols
      str_row = [str_row ' & ' num2str(arr(irow,icol), data_format{min([icol,end])})];
   end
   if (hline ~=0) && (irow ~= num_rows)
      textable = {textable{:}, [str_row ' \\ \hline']};
   else
      textable = {textable{:}, [str_row ' \\']};
   end
end

textable = {textable{:}, '   \hline', '   \end{tabular}', ['   \caption{' caption{:} '}'], ...
         '   \label{tab;tab1}', '\end{table*}'};

% 4) display the table for copying and pasting
for i=1:length(textable)
   disp(textable{i})
end
