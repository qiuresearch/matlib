function sasimg = sasimg_init(initpar, varargin)
% --- Usage:
%        sasimg = sasimg_init()
% --- Purpose:
%        current focus is only to get 
%        read a setupfile to compile the IqGetX structure array
%
% --- Parameter(s):
%     
% --- Return(s): 
%        sasimg - 
%
% --- Example(s):
%
% $Id: sasimg_init.m,v 1.17 2014/10/29 18:03:21 xqiu Exp $
%
readdata = 1;
dataformat = '';
parse_varargin(varargin);

if ~exist('initpar', 'var') || isempty(initpar)
   sasimg = struct(...
       'id', 1, ...
       'select', 1, ...
       'title', '', ...
       'datadir', '', ...
       'prefix', '', ...
       'suffix', '', ...
       'filename', '', ... % datadir, prefix, and suffix are derived from filename
       'dataformat', dataformat, ...
       'date', '', ...
       'beamline', '', ...
       'user', 'QiuLab', ...
       'detector', '', ...
       'im', [], ...
       'rawim', [], ...
       'im_size', [], ...
       'iq', [], ...
       'autogetiq', 1, ...
       'autosaveiq', 0, ...
       'gui2newdata', 1, ... % image editting
       'invertim', 0, ...    
       'invertim_zero', 65535, ... 
       'transposeim', 0, ...
       'transposeim_type', 1, ...
       'transposeim_method', {'y,x'}, ...
       'offset', 0.0, ... 
       'scale', 1.0, ...
       'log10I', 0, ...
       'smooth', 0, ...
       'smooth_span', 5, ...
       'smooth_type', 1, ...
       'maskim', 0, ...
       'E', 8.0, ...         % calibration data
       'X_Lambda', 1.54, ...
       'X_cen', [], 'Y_cen', [], ...
       'Spec_to_Phos', 1000, ...
       'MaskIfile', '', ...
       'MaskI', [], ...
       'MaskD', [], ...
       'calibrant', 'AgBehenate', ...
       'calib_dspacing', 58.38, ...
       'calib_ringxy', [], ...
       'mask_polygonxy', [], ...  % mask data
       'mask_detradius', 1150, ... % assume a disk
       'mask_bsradius', 25, ... % beam stop size
       'mask_deadcenradius', 15, ...
       'mask_edgewidth', 0, ...
       'slice_num', 8, ...
       'slice_dspacing', 58.38, ...
       'slice_tolerance', 0.001, ...
       'slice_autoalign', 0, ...
       'donut_numpoints', 101, ...
       'donut_Qcenter', 0.25, ...
       'donut_Qwidth', 0.02, ...
       'symbkg_numbins', 500, ...
       'symbkg_negfraction', 0.1, ... % fraction of negative after sub
       'plotopt', struct('min', -inf, ...
                         'max', inf, ...
                         'logscale', 0, ...
                         'colormap', 'Jet', ...
                         'colorbar', 0, ...
                         'locklim', 1, ...
                         'im', 1, ...
                         'iq', 1, ...
                         'MaskI', 0, ...
                         'MaskD', 1, ...
                         'calibring', 1, ...
                         'calibring_num', 3, ...
                         'calib_ringxy', 1, ...
                         'mask_polygonxy', 1, ...
                         'zoom', 1, ...
                         'zoomsize', 64, 'mousexy', [], ...
                         'iq_logx', 0, ...
                         'iq_logy', 0, ...
                         'iq_qiq', 0, ...
                         'iq_qiqpower', 1, ...
                         'iq_match', 0, ...
                         'iq_matchrange', [0.5, 0.8], ...
                         'iq_matchscale', 1, ...
                         'iq_matchoffset', 0), ...
       'num_history', 0, ...
       'history', [] ...
       );
   sasimg.transposeim_method = {'y,x', '-x,y', 'x,-y', '-x,-y'};
   return;
end

% an input is given, proceed to initialize
if ~exist('copystru', 'var')
   copystru = sasimg_init([], varargin{:});
end
if isnumeric(initpar) % if an image array is passed
   sasimg = copystru;
   sasimg.rawim = initpar;
   sasimg.title = inputname{1};
   sasimg = sasimg_init(sasimg, 'readdata', 0);
elseif isstr(initpar)   % if file name is passed
   sasimg = copystru;
   sasimg.filename = initpar;
   sasimg = sasimg_init(sasimg, 'readdata', 1);
elseif iscell(initpar) % if a cell array of filenames
   sasimg = repmat(copystru, 1, length(initpar)); 
   [sasimg.filename] = deal(initpar{:});
   sasimg = sasimg_init(sasimg, 'readdata', 1);
elseif isstruct(initpar) % if a sasimg structure is passed
   sasimg = initpar;
   
   % 1) read in data if necessary
   if (readdata == 1)
      for i=1:length(sasimg)
         [sasimg(i).datadir, sasimg(i).prefix, sasimg(i).suffix] ...
             = fileparts(sasimg(i).filename);
         sasimg(i).id = i;
         sasimg(i).title = [sasimg(i).prefix];

         % guess file format if it's not specified
         if isempty(sasimg(i).dataformat)
            sasimg(i).dataformat = dataformat_guess(sasimg(i).filename);
         end
         % read the data file
         switch upper(sasimg(i).dataformat)
            case {'MAR345'}
               sasimg(i).rawim = imread_mar345(sasimg(i).filename);
            case {'HIST', 'IQ'}
               old_filename = sasimg(i).filename;
               specdata = specdata_readfile(sasimg(i).filename);
               if ~isempty(specdata)
                  sasimg(i) = struct_assign(specdata(1), sasimg(i), ...
                                            'append', 0);
               end
               % read mask if present
               if exist(sasimg(i).MaskIfile, 'file')
                  showinfo(['Loading MaskI file: ' pwd() '/' sasimg(i).MaskIfile]);
                  tmp = load(sasimg(i).MaskIfile);
                  sasimg(i).MaskI = uint8(tmp.MaskI);
                  sasimg(i).MaskD = uint8(tmp.MaskI);
               else
                  showinfo(['MaskI file: ' pwd() '/' sasimg(i).MaskIfile ...
                            'doesnot exist!!!'], 'warning');
               end
               % update the filename if IQGETX format
               if isfield(specdata, 'samnums') && ~isempty(specdata.samnums)
                  sasimg(i).filename = gwxray_getfilebynum( ...
                      specdata(1).samnums, 'datadir', sasimg(i).datadir, ...
                      'suffix', sasimg(i).suffix);
               end
               % check consistency between filenames
               if strcmpi(old_filename, sasimg(i).filename)
                  showinfo(['Image file cannot be the same as the ' ...
                            'history file name!'], 'warning');
               else
                  autogetiq = sasimg(i).autogetiq;
                  sasimg(i).dataformat = '';
                  sasimg(i).autogetiq = 0;
                  sasimg(i) = sasimg_init(sasimg(i), 'readdata', 1);
                  sasimg(i).autogetiq = autogetiq;
                  return
               end
            otherwise
               sasimg(i).rawim = imread(sasimg(i).filename, 'tiff');
         end
      end
   end
   % 2) reset title, im_size, initialize Mask
   global X_cen
   for i = 1:length(sasimg)
      sasimg(i).im_size = size(sasimg(i).rawim);
      
      % if uninitialized and global variables exist
      if isempty(sasimg(i).X_cen)
         if ~isempty(X_cen)
            sasimg(i) = sasimg_globalvar(sasimg(i), 'get');
         else
            sasimg(i).X_cen = sasimg(i).im_size(1)/2; 
            sasimg(i).Y_cen = sasimg(i).im_size(2)/2;
         end
      end
      if isempty(sasimg(i).MaskI); sasimg(i).MaskI = ones(sasimg(i).im_size, 'uint8'); end
      if isempty(sasimg(i).MaskD); sasimg(i).MaskD = ones(sasimg(i).im_size, 'uint8'); end
   end
   
   % 3) get im and edit it
   
   sasimg = sasimg_dataprep(sasimg);
   
   % 4) AutoGetIQ if set (maybe better to do it in dataprep)
      
else
   showinfo('The input parameter is not recognized');
end

return
