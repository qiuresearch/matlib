function resolutionGui()
%
%
% This Gui is for controlling the parameters of the small angle X-ray
% scattering and show the resolution for different q value.
%
%
%
% Author: DehuaGuo
% Date: 6 Aug 2012
  S = creatInterface();
       
%--------------------------------------------------------------------------%
function S = creatInterface()

    S = struct();
    S.window = figure('Name','resolutionGui',...
                  'NumberTitle','off',...
                  'Position',100*[.1 .1 10 6]);
    uiextras.set( S.window,'DefaultBoxPanelTitleColor',[0.7 1.0 0.7] );
    stdSpacing = {'Padding',3,'Spacing',3};
    
    mainLayout = uiextras.HBoxFlex('Parent', S.window, stdSpacing{:});
    
    leftSec = uiextras.VBox('Parent',mainLayout, stdSpacing{:});
    rightSec = uiextras.VBox('Parent',mainLayout, stdSpacing{:});
    set(mainLayout, 'Sizes', [-2, -1]);
    
    topleftSec = uiextras.HBox('Parent', leftSec, stdSpacing{:});
    bottomleftSec = uiextras.HBox( 'Parent', leftSec, stdSpacing{:});
    toprightSec = uiextras.HBox('Parent', rightSec, stdSpacing{:});
    bottomrightSec = uiextras.HBox('Parent', rightSec, stdSpacing{:});
    set(leftSec,'Sizes', [-1, -1]);
    
    PicturePanel = uiextras.Panel('Parent', topleftSec,...
                                  'Title', 'Picture');
   
    PlotPanel = uiextras.Panel('Parent', bottomleftSec,...
                               'Title','Plot');
                           
    ControlPanel = uiextras.Panel('Parent',toprightSec,...
                                  'Title','Manipulation');
                              
                              
    %----------------------------------------------------------------------%
    
    %-----Setting Panel ---------%
    editBox = uiextras.VBox('Parent', ControlPanel,...
                             stdSpacing{:});
    setupPanel = uiextras.Panel('Parent', editBox,... 
                                'Title','Setting');
    editLine = uiextras.VBox('Parent', setupPanel,...
                             stdSpacing{:});
    
    
    %-----Sizes of the Cave Setup -------%
    sizes = uiextras.HBox('Parent', editLine,...
                           stdSpacing{:});
    S.tx.r1 = uicontrol('Parent', sizes,...
                        'style', 'text',...
                        'String', 'r1:');
    S.ed.r1 = uicontrol('Parent', sizes,...
                        'style', 'edit',...
                        'String', '');
    S.tx.r1units = uicontrol('Parent',sizes,...
                             'style', 'text',...
                             'String', 'mm');
    S.tx.r2 = uicontrol('Parent', sizes,...
                        'style', 'text',...
                        'String', 'r2:');
    S.ed.r2 = uicontrol('Parent', sizes,...
                        'style', 'edit',...
                        'String', '');
    S.tx.r2units = uicontrol('Parent',sizes,...
                        'style', 'text',...
                        'String', 'mm');
                    
    %-----Distance Setup ----------------%
    distance = uiextras.HBox('Parent', editLine,...
                             stdSpacing{:});
    S.tx.L =  uicontrol('Parent', distance,...
                        'style', 'text',...
                        'String', 'L:');
    S.ed.L =  uicontrol('Parent', distance,...
                        'style', 'edit',...
                        'String', '');
    S.tx.Lunits = uicontrol('Parent',distance,...
                        'style', 'text',...
                        'String', 'mm');           
    S.tx.l =  uicontrol('Parent', distance,...
                        'style', 'text',...
                        'String', 'l:');
    S.ed.l =  uicontrol('Parent', distance,...
                        'style', 'edit',...
                        'String', '');
    S.tx.lunits = uicontrol('Parent',distance,...
                        'style', 'text',...
                        'String', 'mm');
    %-----Wavelength Setup -------------%
    wavelength = uiextras.HBox('Parent', editLine,...
                               stdSpacing{:});
    S.tx.lambda = uicontrol('Parent', wavelength,...
                            'style', 'text',...
                            'String', 'l:','Fontname','symbol');
    S.ed.lambda = uicontrol('Parent', wavelength,...
                            'style', 'edit',...
                            'String', '');
    S.tx.lambda = uicontrol('Parent', wavelength,...
                            'style', 'text',...
                            'String', 'A');
    S.tx.dlambda = uicontrol('Parent', wavelength,...
                            'style', 'text',...
                            'String', 'dl:','Fontname','symbol');
    S.ed.dlambda = uicontrol('Parent', wavelength,...
                            'style', 'edit',...
                            'String', '');
    S.tx.dlambda = uicontrol('Parent', wavelength,...
                            'style', 'text',...
                            'String', 'A');    
    %-----Pixel Size Setup --------------$
    pixelsize = uiextras.HBox('Parent', editLine,...
                              stdSpacing{:});
    S.tx.pixelsize = uicontrol('Parent', pixelsize,...
                               'style', 'text',...
                               'String', 'PixelSize:');
    S.ed.pixelsize = uicontrol('Parent', pixelsize,...
                               'style', 'edit',...
                               'String', '');
    S.tx.pixelsize = uicontrol('Parent', pixelsize,...
                               'style', 'text',...
                               'String', 'mm');
    %----- Qrange Setup -----------------%
  
    
                                                                              
    set(editLine, 'Sizes',[25, 25, 25, 25]);
    
    %----------------------------------------------------------------------%
    %-----Control Panel -----------------%
    
    controlPanel = uiextras.Panel('Parent', editBox,... 
                                  'Title','Control');
    controlPanelBox = uiextras.VBox('Parent', controlPanel,...
                                    stdSpacing{:});
    calculateBox = uiextras.HBox('Parent', controlPanelBox,...
                                 stdSpacing{:});
    S.cb.cal = uicontrol('Parent', calculateBox,...
                         'style', 'push',...
                         'String', 'Calculate');
    S.tx.cal = uicontrol('Parent', calculateBox,...
                         'style', 'text',...
                         'String', 'Specific Q:');
    S.ed.cal = uicontrol('Parent', calculateBox,...
                         'style', 'edit',...
                         'String', '');
    S.tx.calunits = uicontrol('Parent', calculateBox,...
                              'style', 'text',...
                              'String', '1/A'); 
    set(calculateBox, 'Sizes', [ 80, -1, -1, -1]);
    qrange = uiextras.HBox('Parent', controlPanelBox,...
                           stdSpacing{:});                      
    S.cb.plot = uicontrol('Parent', qrange,...
                         'style', 'push',...
                         'String', 'Plot');
    S.tx.qrange = uicontrol('Parent', qrange,...
                            'style', 'text',...
                            'String', 'Qrange:');
    S.ed.qmin = uicontrol('Parent', qrange,...
                          'style', 'edit',...
                          'String', '');
    S.tx.to = uicontrol('Parent', qrange,...
                        'style', 'text',...
                        'String', 'to');
    S.ed.qmax = uicontrol('Parent', qrange,...
                          'style', 'edit',...
                          'String', '');
    S.tx.qunits = uicontrol('Parent', qrange,...
                            'style', 'text',...
                            'String', '1/A');
    set(qrange, 'Sizes', [ 80, -1, -1, -1,-1,-1]);
                     
    S.cb.save = uicontrol('Parent', controlPanelBox,...
                         'style', 'push',...
                         'String', 'SavePlot');  
    set(controlPanelBox, 'Sizes', [30, 30, 30]);
    
    %----- result panel -----------------%
    resultPanel = uiextras.Panel('Parent', bottomrightSec,...
                                 'Title', 'Result'); 
    resultLine = uiextras.VBox('Parent', resultPanel,...
                               stdSpacing{:});
    resultBox0 = uiextras.HBox('Parent', resultLine);
    S.tx.inputQ = uicontrol('Parent', resultBox0,...
                            'style', 'text',...
                            'String', 'Q =');
    S.tx.inputQQ = uicontrol('Parent', resultBox0,...
                             'style', 'text',...
                             'String', '');
    S.tx.inputQunits = uicontrol('Parent', resultBox0,...
                            'style', 'text',...
                            'String', '1/A');
    resultBox1 = uiextras.HBox('Parent', resultLine);
    S.tx.sigma_1 = uicontrol('Parent', resultBox1,...
                             'style', 'text',...
                             'String', 's1 =',...
                             'Fontname', 'symbol');
    S.tx.sigma_1result = uicontrol('Parent', resultBox1,...
                                   'style', 'text',...
                                   'String', ' ');
    S.tx.sigma_1units = uicontrol('Parent', resultBox1,...
                                  'style', 'text',...
                                  'String', '1/A');
    resultBox2 = uiextras.HBox('Parent', resultLine);
    S.tx.sigma_2 = uicontrol('Parent', resultBox2,...
                             'style', 'text',....
                             'String', 's2 =',...
                             'Fontname', 'symbol');
    S.tx.sigma_2result = uicontrol('Parent', resultBox2,....
                                   'style', 'text',...
                                   'String', ' ');
    S.tx.sigma_2units = uicontrol('Parent', resultBox2,...
                                  'style', 'text',...
                                  'String', '1/A');
    S.ax.axe3 = axes('Parent', resultLine,...
                     'units', 'normalized',...
                     'tag', 'axes3',...
                     'ActivePositionProperty','Outerposition',...
                      'fontsize',8);
    set(resultLine, 'Sizes', [-1, -1, -1, 200]);                          
 
%--------------------------------------------------------------------------%

    %----- control center ---------------%
    %----- initialise data --------------%    
    %set(S.cb.initialise, 'callback', {@init,S});
    %----- read image -------------------%
    S.ax.axe1 = axes('Parent',PicturePanel,...
                     'units','normalized',...
                     'tag', 'axes1');
       sasa = imread('SASX.png');
       imshow(sasa);
    %----- calculate standard deviation--%
    
    set(S.cb.cal,  'callback', {@showresult,S});
    
      
    
    %----- plot image -----------------------%       
    S.ax.axe2 = axes('Parent', PlotPanel,...
                      'units', 'normalized',...
                      'tag','axes2',...
                      'ActivePositionProperty','Outerposition',...
                      'fontsize',8);
                  
    set(S.cb.plot,'callback',{@pl,S});
end
    
%--------------------------------------------------------------------------%
    %----- functions ------------------------%
    %----- resolution function --------------%
function s = calculate(Q,I)
    verbose = 1;
    if nargin < 1
       funcname = mfilename; % or use dbstack to get its caller if needed
      eval(['help ' funcname]);
       return
    end

% The formula is based on "Analytical Treatment of the Resolution
% Function for small-Angle Scattering" by JAN SKOV PEDERSEN

% length is in mm; R1 and R2 are radius; pixelsize is the diameter


% values used by the book on page 158
%sconfig = struct('lambda', 6, 'd_lambda', 6*0.13, 'L1', 16140, 'R1', ...
%               7.15, 'L2', 13190, 'R2', 6.35, 'pixelsize', 5);
    
    
    s = struct();
    s = I;
    s.Q = Q;
    if s.lambda*s.Q/(4*pi) >= 1
        error('the value of Q is too large, please input a small value of Q')
    end
    theta = asin(s.lambda*s.Q/(4*pi));
    s.sigma_w = s.Q*s.d_lambda/(s.lambda*2*(2*log(2))^(0.5));
    % sigma_w is the variance caused by the source

    a1 = s.r1/(s.l/(cos(2*theta))^2+s.L);
    a2 = s.r2*cos(2*theta)^2/s.l;
    if a1 >= a2;
        beta_1 = 2*s.r1/s.L - 0.5*s.r2^2/s.r1*(cos(2*theta))^4 ...
            /(s.l^2*s.L)*(s.L+s.l/(cos(2*theta))^2)^2;
    else beta_1 = 2*s.r2*(1/s.L + (cos(theta))^2/s.l) - 0.5*s.r1^2/s.r2*s.l/s.L...
            /((cos(2*theta))^2*(s.L+s.l/(cos(2*theta))^2));
    end

    b1 = s.r1/(s.L+s.l/cos(2*theta));
    b2 = s.r2*cos(2*theta)/s.l;
    if b1 >= b2;
        beta_2 = 2*s.r1/s.L - 0.5*s.r2^2/s.r1*(cos(2*theta)^2)...
           /(s.l^2*s.L)*(s.L+s.l/cos(2*theta))^2;
    else beta_2 = 2*s.r2*(1/s.L + cos(2*theta)/s.l)-0.5*s.r1^2/s.r2*s.l/s.L...
             /(cos(2*theta)*(s.L+s.l/cos(2*theta)));
    end
    
    s.sigma_c1 = 2*pi/s.lambda*cos(theta)*beta_1/(2*(2*log(2))^0.5);
    s.sigma_c2 = 2*pi/s.lambda*beta_2/(2*(2*log(2))^0.5);
    %s.sigma_c1 is the standard variance caused by sample's size in the direction which
    %is perpendicular to the <q>.
    %s.sigma_c2 is the standard variance caused by sample's size in the direction which
    %is parallel to the <q>.

    s.sigma_d1 = 2*pi/s.lambda*cos(theta)*s.pixelsize/(s.l*(2*log(2))^0.5);
    s.sigma_d2 = 2*pi/s.lambda*cos(theta)*cos(2*theta)^2*s.pixelsize/(s.l*(2*log(2))^0.5);
    %s.sigma_d is the standard variance caused by the finited small size of the detetor.

    s.sigma_11 =  sqrt(s.sigma_w^2+s.sigma_c1^2+s.sigma_d1^2);
    s.sigma_22 =  sqrt(s.sigma_c2^2+s.sigma_d2^2);
    s.sigma_1 = s.sigma_11*10^-10;
    s.sigma_2 = s.sigma_22*10^-10;

end

    % sigma is the total standard variance of the Resolution Function

    %----- plot function --------------------%
function [] = pl (varargin)
    S = varargin{3};
    
    S.r1 = str2num(get(S.ed.r1,'String'))*10^-3;
    S.r2 = str2num(get(S.ed.r2,'String'))*10^-3;
    S.l  = str2num(get(S.ed.l,'String'))*10^-3;
    S.L  = str2num(get(S.ed.L,'String'))*10^-3;
    S.lambda = str2num(get(S.ed.lambda,'String'))*10^-10;
    S.d_lambda = str2num(get(S.ed.dlambda,'String'))*10^-10;
    S.pixelsize = str2num(get(S.ed.pixelsize,'String'))*10^-3;
    S.qmin = str2num(get(S.ed.qmin,'String'));
    S.qmax = str2num(get(S.ed.qmax,'String')); 
  
    x = S.qmin:0.01:S.qmax;
    xx = x*10^10;
    y = ones(1,length(x));
    z = ones(1,length(x));
    for i = 1:length(x)
     tmp = calculate(xx(i),S);
     y(i) = tmp.sigma_1;
     z(i) = tmp.sigma_2;
     end
    plot(x,y,x,z)
    title('\sigma_1,\sigma_2 vs q','fontsize',12)
    grid on;
    xlabel('q (1/A)','fontsize',10);
    ylabel('\sigma (1/A)','fontsize',10);
    legend('\sigma_1','\sigma_2', 'Parent', );
    
end
function [] = showresult(varargin)
    S = varargin{3};
    
    S.r1 = str2num(get(S.ed.r1,'String'))*10^-3;
    S.r2 = str2num(get(S.ed.r2,'String'))*10^-3;
    S.l  = str2num(get(S.ed.l,'String'))*10^-3;
    S.L  = str2num(get(S.ed.L,'String'))*10^-3;
    S.lambda = str2num(get(S.ed.lambda,'String'))*10^-10;
    S.d_lambda = str2num(get(S.ed.dlambda,'String'))*10^-10;
    S.pixelsize = str2num(get(S.ed.pixelsize,'String'))*10^-3;
    S.Q = str2num(get(S.ed.cal,'String'))*10^10;    
    tmp = calculate(S.Q,S);
    set(S.tx.inputQQ, 'String', S.Q/(10^10));
    set(S.tx.sigma_1result, 'String', num2str(tmp.sigma_1));
    set(S.tx.sigma_2result, 'String', num2str(tmp.sigma_2));
    x = (S.Q/(10^10)-3*tmp.sigma_1):0.1:(S.Q/(10^10)+3*tmp.sigma_1);
    y = ones(1,length(x));
    for i = 1:length(x)
        y(i) = 1/(2*pi*tmp.sigma_1)*exp(-0.5*(x(i))^2/(tmp.sigma_1)^2);
    end
    plot(x,y,'Parent', S.ax.axe3)
    title('\sigma_1,\sigma_2 vs q','fontsize',12)
    grid on;
    xlabel('q (1/A)','fontsize',10,'Parent', S.ax.axe3);
    ylabel('Intensity','fontsize',10, 'Parent', S.ax.axe3);    
    legend('R(q)','Parent', S.ax.axe3);
end
%--------------------------------------------------------------------------%

end