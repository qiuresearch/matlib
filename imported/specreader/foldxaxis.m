function foldxaxis
% FOLDXAXIS Fold the x axis along a user-defined center line. Called by
% specr and trueref.

hCurrentFig = gcf;
hAxes = gca;

hLine = findall(gca,'Type','line');
% --- if no curve plotted, return
if isempty(hLine)
    return;
end

% --- dlg to input normalization factor
% dlgAnswer=inputdlg({'Enter folding center: '},'Fold X Axis',1);
% if isempty(dlgAnswer)
%     return;
% end
% fold0 = str2double(dlgAnswer{1});
% if isnan(fold0) | isempty(fold0)
%     uiwait(msgbox('Invalid argument!','Fold X Axis Error','error','modal'));
%     return;
% end


% --- find handles of current figures with integer handles
hFigs = findall(0,'Type','Figure');
hFigs = sort(hFigs(find(hFigs == round(hFigs))));
hFigsCell = {};
for iFigs = 1:length(hFigs)
    if isempty(get(hFigs(iFigs),'name'))
        hFigsCell{iFigs} = num2str(hFigs(iFigs));
    else
        hFigsCell{iFigs} = [num2str(hFigs(iFigs)),' : ',get(hFigs(iFigs),'name')];
    end
end

% --- figure layout for print2figure request
figSize = get(hCurrentFig,'position');
figFoldXSize = [figSize(1)+5,(figSize(2)+figSize(4))-200,240,200];
h = figure(...
    'Units','pixels',...
    'MenuBar','none',...
    'Units','pixels',...
    'Name','Fold X Axis to Figure',...
    'NumberTitle','off',...
    'IntegerHandle','off',...
    'Position',figFoldXSize,...
    'HandleVisibility','callback',...
    'Tag','figspecr_foldx',...
    'Resize','off',...
    'WindowStyle','modal',...
    'UserData',[]);
hText1 = uicontrol(...
    'Parent',h,...
    'Style','text',...
    'HorizontalAlignment','left',...
    'BackgroundColor',get(h,'Color'),...
    'Position',[10 figFoldXSize(4)-30 figFoldXSize(3)/2-10 15],...
    'String','Folding Center X = ');
hEdit1 = uicontrol(...
    'Parent',h,...
    'Style','edit',...
    'BackgroundColor','w',...
    'Position',[figFoldXSize(3)/2-15 figFoldXSize(4)-30 figFoldXSize(3)/2+5 20],...
    'String','0',...
    'Tag','foldx_edit1',...
    'HorizontalAlignment','left');
panelSize = [10 60 figFoldXSize(3)-20 100];
hPanel = uipanel(...
    'Parent',h,...
    'BackgroundColor',get(h,'Color'),...
    'Title','Print folded plot to',...
    'Units','pixels',...
    'Position',panelSize);
hRadiobutton1 = uicontrol(...
    'Parent',hPanel,...
    'Style','radiobutton',...
    'BackgroundColor',get(h,'Color'),...
    'Position',[10 panelSize(4)-45 panelSize(3)/2 25],...
    'String','New figure',...
    'Tag','foldx_radiobuttion1',...
    'Value',1,...
    'callback',@radiobutton1Fcn);
hRadiobutton2 = uicontrol(...
    'Parent',hPanel,...
    'Style','radiobutton',...
    'BackgroundColor',get(h,'Color'),...
    'Position',[10 panelSize(4)-80 panelSize(3)/3 25],...
    'String','Figure',...
    'Tag','foldx_radiobuttion2',...
    'Value',0,...
    'callback',@radiobutton2Fcn);
hPopupmenu = uicontrol(...
    'Parent',hPanel,...
    'Style','popupmenu',...
    'BackgroundColor','w',...
    'Units','pixels',...
    'Position',[panelSize(3)/3+10 panelSize(4)-80 panelSize(3)*2/3-20 25],...
    'String','No figure',...
    'HorizontalAlignment','left',...
    'Enable','off',...
    'Value',1,...
    'Tag','foldx_popupmenu');
if isempty(hFigs)
    set(hRadiobutton2,'Enable','off');
    set(hPopupmenu,'Enable','off');
else
    set(hPopupmenu,'String',hFigsCell);
end

hPushbuttonOK = uicontrol(...
    'Parent',h,...
    'Style','pushbutton',...
    'String','OK',...
    'Position',[20 20 (figFoldXSize(3)-60)/2 25],...
    'callback',{@foldx_OKRequestFcn,hCurrentFig,hAxes});
hPushbuttonCancel = uicontrol(...
    'Parent',h,...
    'Style','pushbutton',...
    'String','Cancel',...
    'Position',[figFoldXSize(3)/2+10 20 (figFoldXSize(3)-60)/2 25],...
    'Callback',@foldx_CloseRequestFcn);


%================================================================
% --- radiobutton1 callback fcn (export to new figure)
%================================================================
function radiobutton1Fcn(hObject,eventdata)
h = gcf;
hRadiobutton1 = findobj(h,'Tag','foldx_radiobuttion1');
hRadiobutton2 = findobj(h,'Tag','foldx_radiobuttion2');
hPopupmenu = findobj(h,'Tag','foldx_popupmenu');
set(hRadiobutton1,'Value',1);
set(hRadiobutton2,'Value',0);
set(hPopupmenu,'Enable','off');


%================================================================
% --- radiobutton1 callback fcn (export to old figure)
%================================================================
function radiobutton2Fcn(hObject,eventdata)
h = gcf;
hRadiobutton1 = findobj(h,'Tag','foldx_radiobuttion1');
hRadiobutton2 = findobj(h,'Tag','foldx_radiobuttion2');
hPopupmenu = findobj(h,'Tag','foldx_popupmenu');
set(hRadiobutton1,'Value',0);
set(hRadiobutton2,'Value',1);
set(hPopupmenu,'Enable','on');


%================================================================
% --- print2figure close function
%================================================================
function foldx_CloseRequestFcn(hObject,eventdata)
delete(gcf);
return;


%================================================================
% --- print to figure
%================================================================
function foldx_OKRequestFcn(hObject,eventdata,hCurrentFig,hAxes)
% --- get handles of print2figure
h = gcf;
hEdit1 = findobj(h,'Tag','foldx_edit1');
foldx0 = str2double(get(hEdit1,'string'));
if isnan(foldx0)
    uiwait(msgbox('Invalid folding center!','Fold X Axis Error','error','modal'));
    return;
end
hRadiobutton1 = findobj(h,'Tag','foldx_radiobuttion1');
hRadiobutton2 = findobj(h,'Tag','foldx_radiobuttion2');
hPopupmenu = findobj(h,'Tag','foldx_popupmenu');
% --- get handles of lines in main figure with plots
hLine = findall(hAxes,'Type','line');
% --- determine whether to open a new or existing figure
if get(hRadiobutton1,'Value') == 1
    hNewFigure = figure;
    hNewAxes = axes('Parent',hNewFigure,'Box','on');
else 
    hPopupmenuStr = get(hPopupmenu,'String');
    hNewFigure = sscanf(hPopupmenuStr{get(hPopupmenu,'Value')},'%d');
    figure(hNewFigure);
    hOldAxes = findall(hNewFigure,'Type','Axes');
    if isempty(hOldAxes)
        hNewAxes = axes('Parent',hNewFigure,'Box','on');
    else
        hNewAxes = hOldAxes(end);
        set(hNewAxes,'Box','on');
    end
end
hNewLine_left = [];
hNewLine_right = [];
holdState = ishold(hNewFigure);
for iLine = length(hLine):-1:1
    xdata = get(hLine(iLine),'XData');
    ydata = get(hLine(iLine),'YData');
    xdata_right = xdata(find(xdata>=foldx0))-foldx0;
    ydata_right = ydata(find(xdata>=foldx0));
    xdata_left = foldx0-xdata(find(xdata<=foldx0));
    ydata_left = ydata(find(xdata<=foldx0));
    hold on;
    if ~isempty(xdata_right)
        hNewLine_right(iLine) = plot(hNewAxes,xdata_right,ydata_right);
        set(hNewLine_right(iLine),'Tag',[get(hLine(iLine),'Tag'),' - right'],'DisplayName',[get(hLine(iLine),'Tag'),' - right']);
    end
    if ~isempty(xdata_left)
        hNewLine_left(iLine) = plot(hNewAxes,xdata_left,ydata_left);
        set(hNewLine_left(iLine),'Tag',[get(hLine(iLine),'Tag'),' - left'],'DisplayName',[get(hLine(iLine),'Tag'),' - left']);
    end
    hold off;
    if holdState == 1
        hold on;
    elseif holdState == 0
        hold off;
    end

end
% --- set line properties; first remove zero handls
hNewLine_right(find(hNewLine_right==0)) = [];
hNewLine_left(find(hNewLine_left==0))   = [];
set(hNewLine_right,...
    'Color','b',...
    'LineStyle','-',...
    'Marker','o',...
    'MarkerSize',5,...
    'MarkerFaceColor','m'...
    );
set(hNewLine_left,...
    'Color','r',...
    'LineStyle','-',...
    'Marker','o',...
    'MarkerSize',5,...
    'MarkerFaceColor','m'...
    );
set(hNewAxes,...
    'XGrid',get(hAxes,'XGrid'),...
    'YGrid',get(hAxes,'YGrid'),...
    'XScale',get(hAxes,'XScale'),...
    'YScale',get(hAxes,'YScale')...
    );
delete(h);   % quit print2figure


